{"version":3,"file":"index.js","names":["require","graphqlUploadExpress","startApolloServer","typeDefs","resolvers","app","express","httpServer","http","createServer","server","ApolloServer","csrfPrevention","cache","context","req","userId","Auth","getUserId","start","applyMiddleware","path","Promise","resolve","listen","port","console","log","graphqlPath","mongoose","connect","urlMONGODB","useNewUrlParser","then"],"sources":["../index.js"],"sourcesContent":["import { ApolloServer } from 'apollo-server-express'\nimport mongoose from 'mongoose'\nimport typeDefs from './graphql/typeDefs/'\nimport resolvers from './graphql/resolvers'\nimport Auth from './services/auth.service'\nimport express from 'express'\nimport { port, urlMONGODB } from './configs'\n\nconst {\n  graphqlUploadExpress, // A Koa implementation is also exported.\n} = require('graphql-upload')\nimport http from 'http'\n\nasync function startApolloServer(typeDefs, resolvers) {\n  // Required logic for integrating with Express\n  const app = express()\n  // Our httpServer handles incoming requests to our Express app.\n  // Below, we tell Apollo Server to \"drain\" this httpServer,\n  // enabling our servers to shut down gracefully.\n  const httpServer = http.createServer(app)\n\n  // Same ApolloServer initialization as before, plus the drain plugin\n  // for our httpServer.\n  const server = new ApolloServer({\n    typeDefs,\n    resolvers,\n    csrfPrevention: true,\n    cache: 'bounded',\n    context: ({ req }) => {\n      return {\n        ...req,\n        userId: req ? Auth.getUserId({ req }) : null,\n      }\n    },\n  })\n\n  // More required logic for integrating with Express\n  await server.start()\n  server.applyMiddleware({\n    app,\n\n    // By default, apollo-server hosts its GraphQL endpoint at the\n    // server root. However, *other* Apollo Server packages host it at\n    // /graphql. Optionally provide this to match apollo-server.\n    path: '/',\n  })\n\n  // Modified server startup\n  await new Promise((resolve) => httpServer.listen({ port: port || 4000 }, resolve))\n  console.log(`ðŸš€ Server ready at http://localhost:4000${server.graphqlPath}`)\n}\n\n// This middleware should be added before calling `applyMiddleware`.\n\nmongoose.connect(urlMONGODB, { useNewUrlParser: true }).then(() => {\n  startApolloServer(typeDefs, resolvers)\n})\n"],"mappings":";;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAKA;;;;+CAVA,oJ;;;;;;;;;;;;AAOA,eAEIA,OAAO,CAAC,gBAAD,CAFX;AAAA,IACEC,oBADF,YACEA,oBADF;;SAKeC,iB;;EAuCf;;;;kFAvCA,iBAAiCC,QAAjC,EAA2CC,SAA3C;IAAA;IAAA;MAAA;QAAA;UAAA;YACE;YACMC,GAFR,GAEc,IAAAC,mBAAA,GAFd,EAGE;YACA;YACA;;YACMC,UANR,GAMqBC,gBAAA,CAAKC,YAAL,CAAkBJ,GAAlB,CANrB,EAQE;YACA;;YACMK,MAVR,GAUiB,IAAIC,iCAAJ,CAAiB;cAC9BR,QAAQ,EAARA,QAD8B;cAE9BC,SAAS,EAATA,SAF8B;cAG9BQ,cAAc,EAAE,IAHc;cAI9BC,KAAK,EAAE,SAJuB;cAK9BC,OAAO,EAAE,uBAAa;gBAAA,IAAVC,GAAU,QAAVA,GAAU;gBACpB,uCACKA,GADL;kBAEEC,MAAM,EAAED,GAAG,GAAGE,gBAAA,CAAKC,SAAL,CAAe;oBAAEH,GAAG,EAAHA;kBAAF,CAAf,CAAH,GAA6B;gBAF1C;cAID;YAV6B,CAAjB,CAVjB,EAuBE;;YAvBF;YAAA,OAwBQL,MAAM,CAACS,KAAP,EAxBR;;UAAA;YAyBET,MAAM,CAACU,eAAP,CAAuB;cACrBf,GAAG,EAAHA,GADqB;cAGrB;cACA;cACA;cACAgB,IAAI,EAAE;YANe,CAAvB,EAzBF,CAkCE;;YAlCF;YAAA,OAmCQ,IAAIC,OAAJ,CAAY,UAACC,OAAD;cAAA,OAAahB,UAAU,CAACiB,MAAX,CAAkB;gBAAEC,IAAI,EAAEA,aAAA,IAAQ;cAAhB,CAAlB,EAA0CF,OAA1C,CAAb;YAAA,CAAZ,CAnCR;;UAAA;YAoCEG,OAAO,CAACC,GAAR,6DAAuDjB,MAAM,CAACkB,WAA9D;;UApCF;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;AAyCAC,oBAAA,CAASC,OAAT,CAAiBC,mBAAjB,EAA6B;EAAEC,eAAe,EAAE;AAAnB,CAA7B,EAAwDC,IAAxD,CAA6D,YAAM;EACjE/B,iBAAiB,CAACC,oBAAD,EAAWC,qBAAX,CAAjB;AACD,CAFD"}